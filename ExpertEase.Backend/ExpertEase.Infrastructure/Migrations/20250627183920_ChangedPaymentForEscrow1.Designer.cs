// <auto-generated />
using System;
using System.Collections.Generic;
using ExpertEase.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExpertEase.Infrastructure.Migrations
{
    [DbContext(typeof(WebAppDatabaseContext))]
    [Migration("20250627183920_ChangedPaymentForEscrow1")]
    partial class ChangedPaymentForEscrow1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "unaccent");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategorySpecialistProfile", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecialistsUserId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoriesId", "SpecialistsUserId");

                    b.HasIndex("SpecialistsUserId");

                    b.ToTable("SpecialistCategories", (string)null);
                });

            modelBuilder.Entity("ExpertEase.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("ExpertEase.Domain.Entities.ContactInfo", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.ToTable("ContactInfo");
                });

            modelBuilder.Entity("ExpertEase.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("When payment was cancelled");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("When payment record was created");

                    b.Property<string>("Currency")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character(3)")
                        .HasDefaultValue("RON")
                        .IsFixedLength()
                        .HasComment("ISO currency code");

                    b.Property<DateTime?>("EscrowReleasedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("When money was transferred to specialist");

                    b.Property<bool>("FeeCollected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("Whether platform fee has been secured");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("When client completed payment");

                    b.Property<decimal>("PlatformRevenue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("Platform's actual revenue from this payment");

                    b.Property<decimal>("ProtectionFee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("Platform protection fee");

                    b.Property<string>("ProtectionFeeDetailsJson")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("JSON serialized protection fee calculation details");

                    b.Property<decimal>("RefundedAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("Amount refunded to client");

                    b.Property<DateTime?>("RefundedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("When payment was refunded");

                    b.Property<Guid>("ReplyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReplyId1")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ServiceAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Amount that will be transferred to specialist");

                    b.Property<Guid?>("ServiceTaskId")
                        .HasColumnType("uuid")
                        .HasComment("Associated service task ID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StripeAccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StripeChargeId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("Stripe charge ID");

                    b.Property<string>("StripePaymentIntentId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("Stripe payment intent ID");

                    b.Property<string>("StripeRefundId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("Stripe refund ID if payment was refunded");

                    b.Property<string>("StripeTransferId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("Stripe transfer ID when money sent to specialist");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total amount charged to client (ServiceAmount + ProtectionFee)");

                    b.Property<decimal>("TransferredAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasComment("Amount actually transferred to specialist");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("When payment record was last updated");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Payment_CreatedAt");

                    b.HasIndex("PaidAt")
                        .HasDatabaseName("IX_Payment_PaidAt")
                        .HasFilter("[PaidAt] IS NOT NULL");

                    b.HasIndex("ReplyId");

                    b.HasIndex("ReplyId1")
                        .IsUnique();

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Payment_Status");

                    b.HasIndex("StripePaymentIntentId")
                        .IsUnique()
                        .HasDatabaseName("IX_Payment_StripePaymentIntentId")
                        .HasFilter("[StripePaymentIntentId] IS NOT NULL");

                    b.HasIndex("Status", "CreatedAt")
                        .HasDatabaseName("IX_Payment_Status_CreatedAt");

                    b.HasIndex("Status", "TransferredAmount", "RefundedAmount")
                        .HasDatabaseName("IX_Payment_Escrow_Status")
                        .HasFilter("[Status] IN ('Escrowed', 'Completed')");

                    b.ToTable("Payments", "dbo", t =>
                        {
                            t.HasComment("Payment records with escrow support for secure service transactions");

                            t.HasCheckConstraint("CK_Payment_EscrowRelease_After_Payment", "[EscrowReleasedAt] IS NULL OR [PaidAt] IS NULL OR [EscrowReleasedAt] >= [PaidAt]");

                            t.HasCheckConstraint("CK_Payment_PlatformRevenue_Valid", "[PlatformRevenue] >= 0 AND [PlatformRevenue] <= [ProtectionFee]");

                            t.HasCheckConstraint("CK_Payment_ProtectionFee_NonNegative", "[ProtectionFee] >= 0");

                            t.HasCheckConstraint("CK_Payment_RefundedAmount_Valid", "[RefundedAmount] >= 0 AND [RefundedAmount] <= [TotalAmount]");

                            t.HasCheckConstraint("CK_Payment_ServiceAmount_NonNegative", "[ServiceAmount] >= 0");

                            t.HasCheckConstraint("CK_Payment_TotalAmount_Valid", "[TotalAmount] = [ServiceAmount] + [ProtectionFee]");

                            t.HasCheckConstraint("CK_Payment_TransferredAmount_Valid", "[TransferredAmount] >= 0 AND [TransferredAmount] <= [ServiceAmount]");
                        });
                });

            modelBuilder.Entity("ExpertEase.Domain.Entities.Reply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Reply");
                });

            modelBuilder.Entity("ExpertEase.Domain.Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReceiverUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("RequestedStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SenderUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("ExpertEase.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReceiverUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceTaskId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.HasIndex("ServiceTaskId")
                        .IsUnique();

                    b.ToTable("Review");
                });

            modelBuilder.Entity("ExpertEase.Domain.Entities.ServiceTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SpecialistId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("SpecialistId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceTask");
                });

            modelBuilder.Entity("ExpertEase.Domain.Entities.SpecialistProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<List<string>>("Portfolio")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("StripeAccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("YearsExperience")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("SpecialistProfile");
                });

            modelBuilder.Entity("ExpertEase.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AuthProvider")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CategorySpecialistProfile", b =>
                {
                    b.HasOne("ExpertEase.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpertEase.Domain.Entities.SpecialistProfile", null)
                        .WithMany()
                        .HasForeignKey("SpecialistsUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExpertEase.Domain.Entities.ContactInfo", b =>
                {
                    b.HasOne("ExpertEase.Domain.Entities.User", "User")
                        .WithOne("ContactInfo")
                        .HasForeignKey("ExpertEase.Domain.Entities.ContactInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpertEase.Domain.Entities.Payment", b =>
                {
                    b.HasOne("ExpertEase.Domain.Entities.Reply", "Reply")
                        .WithMany()
                        .HasForeignKey("ReplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpertEase.Domain.Entities.Reply", null)
                        .WithOne("Payment")
                        .HasForeignKey("ExpertEase.Domain.Entities.Payment", "ReplyId1");

                    b.Navigation("Reply");
                });

            modelBuilder.Entity("ExpertEase.Domain.Entities.Reply", b =>
                {
                    b.HasOne("ExpertEase.Domain.Entities.Request", "Request")
                        .WithMany("Replies")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("ExpertEase.Domain.Entities.Request", b =>
                {
                    b.HasOne("ExpertEase.Domain.Entities.User", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpertEase.Domain.Entities.User", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("ExpertEase.Domain.Entities.Review", b =>
                {
                    b.HasOne("ExpertEase.Domain.Entities.User", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpertEase.Domain.Entities.User", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpertEase.Domain.Entities.ServiceTask", "ServiceTask")
                        .WithOne("Review")
                        .HasForeignKey("ExpertEase.Domain.Entities.Review", "ServiceTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");

                    b.Navigation("ServiceTask");
                });

            modelBuilder.Entity("ExpertEase.Domain.Entities.ServiceTask", b =>
                {
                    b.HasOne("ExpertEase.Domain.Entities.Payment", "Payment")
                        .WithOne()
                        .HasForeignKey("ExpertEase.Domain.Entities.ServiceTask", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpertEase.Domain.Entities.User", "Specialist")
                        .WithMany()
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpertEase.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Specialist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpertEase.Domain.Entities.SpecialistProfile", b =>
                {
                    b.HasOne("ExpertEase.Domain.Entities.User", "User")
                        .WithOne("SpecialistProfile")
                        .HasForeignKey("ExpertEase.Domain.Entities.SpecialistProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpertEase.Domain.Entities.Reply", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("ExpertEase.Domain.Entities.Request", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("ExpertEase.Domain.Entities.ServiceTask", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("ExpertEase.Domain.Entities.User", b =>
                {
                    b.Navigation("ContactInfo");

                    b.Navigation("SpecialistProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
